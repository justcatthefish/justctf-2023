# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import oracle_pb2 as oracle__pb2


class OracleStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.generateNewTask = channel.unary_unary(
        '/Oracle/generateNewTask',
        request_serializer=oracle__pb2.Void.SerializeToString,
        response_deserializer=oracle__pb2.Task.FromString,
        )
    self.checkResponse = channel.unary_unary(
        '/Oracle/checkResponse',
        request_serializer=oracle__pb2.TaskResponse.SerializeToString,
        response_deserializer=oracle__pb2.TaskResult.FromString,
        )


class OracleServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def generateNewTask(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def checkResponse(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OracleServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'generateNewTask': grpc.unary_unary_rpc_method_handler(
          servicer.generateNewTask,
          request_deserializer=oracle__pb2.Void.FromString,
          response_serializer=oracle__pb2.Task.SerializeToString,
      ),
      'checkResponse': grpc.unary_unary_rpc_method_handler(
          servicer.checkResponse,
          request_deserializer=oracle__pb2.TaskResponse.FromString,
          response_serializer=oracle__pb2.TaskResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Oracle', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
